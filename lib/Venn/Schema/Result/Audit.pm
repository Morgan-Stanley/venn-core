package Venn::Schema::Result::Audit;

=head1 NAME

Venn::Schema::Result::Audit

=head1 DESCRIPTION

Audit table base class.

=head1 AUTHOR

Venn Engineering

Josh Arenberg, Norbert Csongradi, Ryan Kupfer, Hai-Long Nguyen

=head1 LICENSE

Copyright 2013,2014,2015 Morgan Stanley

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut

use 5.010;
use Moose;
use MooseX::NonMoose;
use namespace::autoclean;
use Data::Dumper;
use TryCatch;
extends 'Venn::SchemaBase::Result';
with qw(
    Venn::Role::Logging
    Venn::SchemaRole::Result::CommonClassAttributes
);

use Scalar::Util qw( reftype );

__PACKAGE__->config(
    display_name    => 'Audit',
    primary_field   => 'request_id',
);

__PACKAGE__->table("AUDIT");

__PACKAGE__->load_components(qw/Validator DefaultColumnValues/);

__PACKAGE__->add_columns(
    request_id => {
        display_name       => 'Request ID',
        data_type          => 'bigint',
        is_auto_increment  => 1,
        documentation      => 'Unique identifier for each request logged to this table (PK)',
    },
    start_time => {
        display_name       => 'Start Time',
        data_type          => 'varchar',
        size               => 32,
        is_nullable        => 0,
        default_value_sub  => sub { return time(); },
        documentation      => 'The time at which the request processing started',
    },
    #end_time => {
    #    display_name       => 'End Time',
    #    data_type          => 'integer',
    #    is_nullable        => 0,
    #    documentation      => 'The time at which the request processing finished',
    #},
    user => {
        display_name   => 'User',
        data_type      => 'varchar',
        size           => 32,
        is_nullable    => 0,
        documentation  => 'User who issued the the request',
    },
    uri_path => {
        display_name   => 'Base URI Path (action)',
        data_type      => 'varchar',
        size           => 64,
        is_nullable    => 0,
        documentation  => 'The base URI that was used to call the API (indicates action)',
    },
    http_method => {
        display_name   => 'HTTP Method',
        data_type      => 'varchar',
        size           => 10,
        is_nullable    => 0,
        documentation  => 'The HTTP method used for the request (GET/POST/PUT/DELETE)',
    },
    request_payload => {
        display_name   => 'Request Payload',
        data_type      => 'clob',
        size           => 32768,
        is_nullable    => 0,
        documentation  => 'The json request payload that was received from the client',
    },
    response_payload => {
        display_name   => 'Response Payload',
        data_type      => 'clob',
        size           => 32768,
        is_nullable    => 0,
        documentation  => 'The json response payload given back to the client at the completion of the request processing',
    },
    response_code => {
        display_name   => 'HTTP Response code',
        data_type      => 'smallint',
        is_nullable    => 0,
        documentation  => 'The HTTP response code generated by the server',
    },
);

__PACKAGE__->set_primary_key('request_id');

__PACKAGE__->indices({
    audit_pk_idx   => [qw( request_id )],
    audit_user_idx => [qw( user )],
});

__PACKAGE__->meta->make_immutable(inline_constructor => 0);
